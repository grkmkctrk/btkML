# -*- coding: utf-8 -*-
"""Sablon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sCfw3_mzzfB0EgpZADxXXtKZQ_Qs6OPr

# 1. Kutuphaneler
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.impute import SimpleImputer

"""# 2. Veri on isleme

> **2.1 Veri yukleme**
"""

veriler = pd.read_csv('/content/eksikveriler.csv')

"""> **2.2 Eksik verileri duzenleme**"""

imp = SimpleImputer(missing_values=np.nan, strategy='mean')

sayisalVeriler = veriler.iloc[:, 1:4].values

sayisalVeriler = imp.fit_transform(sayisalVeriler)

sayisalVeriler

ulke = veriler.iloc[:,0:1].values

ulke

"""**2.3 Kategorikden sayisal veriye gecis**"""

from sklearn import preprocessing

le = preprocessing.LabelEncoder()

ulke[:, 0] = le.fit_transform(veriler.iloc[:, 0:1])

ulke

ohe = preprocessing.OneHotEncoder()

ulke = ohe.fit_transform(ulke).toarray()

ulke

"""# 3. Numpy dizisi DataFrame Donusumu"""

sonuc1 = pd.DataFrame(data=ulke, index=range(len(ulke)), columns=['fr', 'tr', 'us'])

sonuc1

sonuc2 = pd.DataFrame(data=sayisalVeriler, index=range(len(sayisalVeriler)), columns= ['boy', 'kilo', 'yas'])

sonuc2

cinsiyet = veriler.iloc[:,-1].values

sonuc3 = pd.DataFrame(data=cinsiyet, index=range(len(cinsiyet)), columns=['cinsiyet'])

sonuc3

"""**3.1 DataFramelerin birlestirlime islemi**"""

s1 = pd.concat([sonuc1, sonuc2], axis=1) # satir satira birlestirmek icin yani yatay boyutta birlestirmek icin axis = 1

s2 = pd.concat([s1, sonuc3], axis=1)

s2

"""# 4. Verilerin test ve egitim icin bolunmesi"""

from sklearn.model_selection import train_test_split

# verinin yuzde 66 si antrenman icin kullanilsin kalan yuzde 33'u test edilsin diye ayrdik
# random_state rastsal ayirma icin kullaniliyor ayni degeri alan her kod ayni ayrimi yapar
x_train, x_test, y_train, y_test = train_test_split(s1, sonuc3, test_size = 0.33, random_state = 0)

"""# 5. Verilerin normalize edilme islemi"""

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()

# burasi bir tur normalizasyon islemi anlatiyor (x-mean)/standar_deviation denklemini kullanir
X_train = sc.fit_transform(x_train)
X_test = sc.fit_transform(x_test)